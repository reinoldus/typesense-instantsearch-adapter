{"version":3,"sources":["../src/SearchRequestAdapter.js"],"names":["SearchRequestAdapter","instantsearchRequests","typesenseClient","additionalSearchParameters","collectionSpecificSearchParameters","facetFilters","adaptedResult","transformedTypesenseFilters","map","item","Array","isArray","intermediateFacetFilters","forEach","facetFilter","facetFilterMatches","match","constructor","FILER_STRING_MATCHING_REGEX","fieldName","fieldValue","push","Object","keys","length","console","error","join","fieldValues","typesenseFilterString","numericFilters","filtersHash","filter","RegExp","field","operator","value","adaptedFilters","warn","JSON","stringify","_adaptFacetFilters","_adaptNumericFilters","indexName","INDEX_NAME_MATCHING_REGEX","instantsearchRequest","params","adaptedCollectionName","_adaptIndexName","snakeCasedAdditionalSearchParameters","entries","key","_camelToSnakeCase","typesenseSearchParams","assign","adaptedSortBy","_adaptSortBy","collection","q","query","facet_by","facets","flat","filter_by","_adaptFilters","sort_by","sortBy","max_facet_values","maxValuesPerFacet","page","hitsPerPage","per_page","facetQuery","facet_query","facetName","str","split","toLowerCase","searches","_buildSearchParameters","multiSearch","perform"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexport class SearchRequestAdapter {\n  static get INDEX_NAME_MATCHING_REGEX() {\n    return new RegExp(\"^(.+?)(?=(/sort/(.*))|$)\");\n  }\n\n  static get FILER_STRING_MATCHING_REGEX() {\n    return new RegExp(\"(.*)((?!:).):(?!:)(.*)\");\n  }\n\n  constructor(instantsearchRequests, typesenseClient, additionalSearchParameters, collectionSpecificSearchParameters) {\n    this.instantsearchRequests = instantsearchRequests;\n    this.typesenseClient = typesenseClient;\n    this.additionalSearchParameters = additionalSearchParameters;\n    this.collectionSpecificSearchParameters = collectionSpecificSearchParameters;\n  }\n\n  _adaptFacetFilters(facetFilters) {\n    let adaptedResult = \"\";\n\n    if (!facetFilters) {\n      return adaptedResult;\n    }\n\n    /**\n     * Need to transform:\n     *  facetFilters = [[\"field1:value1\", \"field1:value2\"], \"field2:value3\", \"field2:value4\"]\n     *\n     * Into this:\n     *  field1:=[value1,value2] && field2:=value3 && field2:=value4\n     *\n     * Steps:\n     *  - For each item in facetFilters\n     *    - If item is array\n     *      - OR values together.\n     *      - Warn if field names are not the same\n     *    - If item is string, convert to facet:=value format\n     *  - Join strings by &&\n     */\n\n    const transformedTypesenseFilters = facetFilters.map((item) => {\n      if (Array.isArray(item)) {\n        // Need to transform:\n        // facetFilters = [\"field1:value1\", \"field1:value2\", \"facetN:valueN\"]\n        //\n        // Into this:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        //     \"fieldN\": [\"valueN\"]\n        // }\n\n        const intermediateFacetFilters = {};\n        item.forEach((facetFilter) => {\n          const facetFilterMatches = facetFilter.match(this.constructor.FILER_STRING_MATCHING_REGEX);\n          const fieldName = `${facetFilterMatches[1]}${facetFilterMatches[2]}`;\n          const fieldValue = `${facetFilterMatches[3]}`;\n          intermediateFacetFilters[fieldName] = intermediateFacetFilters[fieldName] || [];\n          intermediateFacetFilters[fieldName].push(fieldValue);\n        });\n\n        if (Object.keys(intermediateFacetFilters).length > 1) {\n          console.error(\n            `Typesense does not support cross-field ORs at the moment. The adapter could not OR values between these fields: ${Object.keys(\n              intermediateFacetFilters\n            ).join(\",\")}`\n          );\n        }\n\n        // Pick first value from intermediateFacetFilters\n        const fieldName = Object.keys(intermediateFacetFilters)[0];\n        const fieldValues = intermediateFacetFilters[fieldName];\n\n        // Need to transform:\n        // intermediateFacetFilters = {\n        //     \"field1\": [\"value1\", \"value2\"],\n        // }\n        //\n        // Into this:\n        // field1:=[value1,value2]\n\n        const typesenseFilterString = `${fieldName}:=[${fieldValues.join(\",\")}]`;\n\n        return typesenseFilterString;\n      } else {\n        // Need to transform:\n        //  fieldName:fieldValue\n        // Into\n        //  fieldName:=fieldValue\n\n        const facetFilterMatches = item.match(this.constructor.FILER_STRING_MATCHING_REGEX);\n        const fieldName = `${facetFilterMatches[1]}${facetFilterMatches[2]}`;\n        const fieldValue = `${facetFilterMatches[3]}`;\n        const typesenseFilterString = `${fieldName}:=[${fieldValue}]`;\n\n        return typesenseFilterString;\n      }\n    });\n\n    adaptedResult = transformedTypesenseFilters.join(\" && \");\n    // console.log(`${JSON.stringify(facetFilters)} => ${adaptedResult}`);\n\n    return adaptedResult;\n  }\n\n  _adaptNumericFilters(numericFilters) {\n    // Need to transform this:\n    // [\"field1<=634\", \"field1>=289\", \"field2<=5\", \"field3>=3\"]\n    // to:\n    // \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    let adaptedResult = \"\";\n\n    if (!numericFilters) {\n      return adaptedResult;\n    }\n\n    // Transform to intermediate structure:\n    // {\n    //   field1: {\n    //     \"<=\": 634,\n    //     \">=\": 289\n    //   },\n    //   field2: {\n    //     \"<=\": 5\n    //   },\n    //   field3: {\n    //     \">=\": 3\n    //   }\n    // };\n    const filtersHash = {};\n    numericFilters.forEach((filter) => {\n      const [, field, operator, value] = filter.match(new RegExp(\"(.*)(<=|>=|>|<|:)(.*)\"));\n      filtersHash[field] = filtersHash[field] || {};\n      filtersHash[field][operator] = value;\n    });\n\n    // Transform that to:\n    //  \"field1:=[634..289] && field2:<=5 && field3:>=3\"\n    const adaptedFilters = [];\n    Object.keys(filtersHash).forEach((field) => {\n      if (filtersHash[field][\"<=\"] != null && filtersHash[field][\">=\"] != null) {\n        adaptedFilters.push(`${field}:=[${filtersHash[field][\">=\"]}..${filtersHash[field][\"<=\"]}]`);\n      } else if (filtersHash[field][\"<=\"] != null) {\n        adaptedFilters.push(`${field}:<=${filtersHash[field][\"<=\"]}`);\n      } else if (filtersHash[field][\">=\"] != null) {\n        adaptedFilters.push(`${field}:>=${filtersHash[field][\">=\"]}`);\n      } else {\n        console.warn(`Unsupported operator found ${JSON.stringify(filtersHash[field])}`);\n      }\n    });\n\n    adaptedResult = adaptedFilters.join(\" && \");\n    return adaptedResult;\n  }\n\n  _adaptFilters(facetFilters, numericFilters) {\n    const adaptedFilters = [];\n\n    adaptedFilters.push(this._adaptFacetFilters(facetFilters));\n    adaptedFilters.push(this._adaptNumericFilters(numericFilters));\n\n    return adaptedFilters.filter((filter) => filter !== \"\").join(\" && \");\n  }\n\n  _adaptIndexName(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[1];\n  }\n\n  _adaptSortBy(indexName) {\n    return indexName.match(this.constructor.INDEX_NAME_MATCHING_REGEX)[3];\n  }\n\n  _buildSearchParameters(instantsearchRequest) {\n    const params = instantsearchRequest.params;\n    const indexName = instantsearchRequest.indexName;\n    const adaptedCollectionName = this._adaptIndexName(indexName);\n\n    // Convert all common parameters to snake case\n    const snakeCasedAdditionalSearchParameters = {};\n    for (const [key, value] of Object.entries(this.additionalSearchParameters)) {\n      snakeCasedAdditionalSearchParameters[this._camelToSnakeCase(key)] = value;\n    }\n\n    // Override, collection specific parameters\n    if (this.collectionSpecificSearchParameters[adaptedCollectionName]) {\n      for (const [key, value] of Object.entries(this.collectionSpecificSearchParameters[adaptedCollectionName])) {\n        snakeCasedAdditionalSearchParameters[this._camelToSnakeCase(key)] = value;\n      }\n    }\n\n    const typesenseSearchParams = Object.assign({}, snakeCasedAdditionalSearchParameters);\n\n    const adaptedSortBy = this._adaptSortBy(indexName);\n\n    Object.assign(typesenseSearchParams, {\n      collection: adaptedCollectionName,\n      q: params.query === \"\" ? \"*\" : params.query,\n      facet_by: [params.facets].flat().join(\",\"),\n      filter_by: this._adaptFilters(params.facetFilters, params.numericFilters),\n      sort_by: adaptedSortBy || this.additionalSearchParameters.sortBy,\n      max_facet_values: params.maxValuesPerFacet,\n      page: (params.page || 0) + 1,\n    });\n\n    if (params.hitsPerPage) {\n      typesenseSearchParams.per_page = params.hitsPerPage;\n    }\n\n    if (params.facetQuery) {\n      typesenseSearchParams.facet_query = `${params.facetName}:${params.facetQuery}`;\n      typesenseSearchParams.per_page = 0;\n    }\n\n    // console.log(params);\n    // console.log(typesenseSearchParams);\n\n    return typesenseSearchParams;\n  }\n\n  _camelToSnakeCase(str) {\n    return str\n      .split(/(?=[A-Z])/)\n      .join(\"_\")\n      .toLowerCase();\n  }\n\n  async request() {\n    const searches = this.instantsearchRequests.map((instantsearchRequest) =>\n      this._buildSearchParameters(instantsearchRequest)\n    );\n\n    return this.typesenseClient.multiSearch.perform({ searches: searches });\n  }\n}\n"],"file":"SearchRequestAdapter.js"}