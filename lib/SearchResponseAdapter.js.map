{"version":3,"sources":["../src/SearchResponseAdapter.js"],"names":["SearchResponseAdapter","typesenseResponse","instantsearchRequest","typesenseGroupedHits","adaptedResult","map","groupedHit","_adaptHits","hits","flat","typesenseHits","typesenseHit","adaptedHit","document","objectID","id","_snippetResult","_adaptHighlightResult","_highlightResult","snippetOrValue","result","Object","assign","entries","attribute","value","matchLevel","matchedWords","highlights","forEach","highlight","field","matched_tokens","indices","k","v","matchedIndices","Array","isArray","unhighlightedValueFromArray","index","includes","push","_adaptHighlightTag","indexOf","params","highlightPreTag","highlightPostTag","typesenseFacetCounts","facet","field_name","counts","count","keys","stats","length","grouped_hits","_adaptGroupedHits","nbHits","found","page","nbPages","_adaptNumberOfPages","hitsPerPage","request_params","per_page","facets","_adaptFacets","facet_counts","facets_stats","_adaptFacetStats","query","q","processingTimeMS","search_time_ms","prototype","utils"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { utils } from \"./support/utils\";\n\nexport class SearchResponseAdapter {\n  constructor(typesenseResponse, instantsearchRequest) {\n    this.typesenseResponse = typesenseResponse;\n    this.instantsearchRequest = instantsearchRequest;\n  }\n\n  _adaptGroupedHits(typesenseGroupedHits) {\n    let adaptedResult = [];\n\n    adaptedResult = typesenseGroupedHits.map((groupedHit) => this._adaptHits(groupedHit.hits));\n\n    // adaptedResult is now in the form of [[{}, {}], [{}, {}], ...]\n    //  where each element in the outer most array corresponds to a group.\n    // We now flatten it to [{}, {}, {}]\n    adaptedResult = adaptedResult.flat();\n\n    return adaptedResult;\n  }\n\n  _adaptHits(typesenseHits) {\n    let adaptedResult = [];\n    adaptedResult = typesenseHits.map((typesenseHit) => {\n      const adaptedHit = {\n        ...typesenseHit.document,\n      };\n      adaptedHit.objectID = typesenseHit.document.id;\n      adaptedHit._snippetResult = this._adaptHighlightResult(typesenseHit, \"snippet\");\n      adaptedHit._highlightResult = this._adaptHighlightResult(typesenseHit, \"value\");\n      return adaptedHit;\n    });\n    return adaptedResult;\n  }\n\n  _adaptHighlightResult(typesenseHit, snippetOrValue) {\n    // Algolia lists all searchable attributes in this key, even if there are no matches\n    // So do the same and then override highlights\n\n    const result = Object.assign(\n      {},\n      ...Object.entries(typesenseHit.document).map(([attribute, value]) => ({\n        [attribute]: {\n          value: value,\n          matchLevel: \"none\",\n          matchedWords: [],\n        },\n      }))\n    );\n\n    typesenseHit.highlights.forEach((highlight) => {\n      result[highlight.field] = {\n        value: highlight[snippetOrValue] || highlight[`${snippetOrValue}s`],\n        matchLevel: \"full\",\n        matchedWords: highlight.matched_tokens,\n      };\n\n      if (highlight.indices) {\n        result[highlight.field][\"matchedIndices\"] = highlight.indices;\n      }\n    });\n\n    // Now convert any values that have an array value\n    // Also, replace highlight tag\n    Object.entries(result).forEach(([k, v]) => {\n      const attribute = k;\n      const { value, matchLevel, matchedWords, matchedIndices } = v;\n      if (Array.isArray(value)) {\n        // Algolia lists all values of the key in highlights, even those that don't have any highlights\n        // So add all values of the array field, including highlights\n        result[attribute] = [];\n        typesenseHit.document[attribute].forEach((unhighlightedValueFromArray, index) => {\n          if (matchedIndices && matchedIndices.includes(index)) {\n            result[attribute].push({\n              value: this._adaptHighlightTag(\n                `${value[matchedIndices.indexOf(index)]}`,\n                this.instantsearchRequest.params.highlightPreTag,\n                this.instantsearchRequest.params.highlightPostTag\n              ),\n              matchLevel: matchLevel,\n              matchedWords: matchedWords[index],\n            });\n          } else {\n            result[attribute].push({\n              value: this._adaptHighlightTag(\n                `${unhighlightedValueFromArray}`,\n                this.instantsearchRequest.params.highlightPreTag,\n                this.instantsearchRequest.params.highlightPostTag\n              ),\n              matchLevel: \"none\",\n              matchedWords: [],\n            });\n          }\n        });\n      } else {\n        // Convert all values to strings\n        result[attribute].value = this._adaptHighlightTag(\n          `${value}`,\n          this.instantsearchRequest.params.highlightPreTag,\n          this.instantsearchRequest.params.highlightPostTag\n        );\n      }\n    });\n    return result;\n  }\n\n  _adaptFacets(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      Object.assign(adaptedResult, {\n        [facet.field_name]: Object.assign({}, ...facet.counts.map((count) => ({ [count.value]: count.count }))),\n      });\n    });\n    return adaptedResult;\n  }\n\n  _adaptFacetStats(typesenseFacetCounts) {\n    const adaptedResult = {};\n    typesenseFacetCounts.forEach((facet) => {\n      if (Object.keys(facet.stats).length > 0) {\n        Object.assign(adaptedResult, {\n          [facet.field_name]: facet.stats,\n        });\n      }\n    });\n    return adaptedResult;\n  }\n\n  adapt() {\n    const adaptedResult = {\n      hits: this.typesenseResponse.grouped_hits\n        ? this._adaptGroupedHits(this.typesenseResponse.grouped_hits)\n        : this._adaptHits(this.typesenseResponse.hits),\n      nbHits: this.typesenseResponse.found,\n      page: this.typesenseResponse.page - 1,\n      nbPages: this._adaptNumberOfPages(),\n      hitsPerPage: this.typesenseResponse.request_params.per_page,\n      facets: this._adaptFacets(this.typesenseResponse.facet_counts || []),\n      facets_stats: this._adaptFacetStats(this.typesenseResponse.facet_counts || {}),\n      query: this.typesenseResponse.request_params.q,\n      processingTimeMS: this.typesenseResponse.search_time_ms,\n    };\n\n    // console.log(adaptedResult);\n    return adaptedResult;\n  }\n}\n\nObject.assign(SearchResponseAdapter.prototype, utils);\n"],"file":"SearchResponseAdapter.js"}